# Reference:
# https://github.com/Microsoft/GSL/blob/master/.travis.yml

if: NOT branch = feature/appveyor

language: cpp

# For Linux, use Ubuntu 18.04 to have g++-10 in Ubuntu Toolchain PPA
dist: bionic

env:
  global:
    - PREMAKE_VERSION="5.0.0-alpha15"
  linux:
    - JOBS="$(nproc)"              # should be ~2
  osx:
    - JOBS="$(sysctl -n hw.ncpu)"  # should be 2

addons:
  apt:
    packages: &linux_packages
      libxrandr-dev
      libudev-dev
      libgl-dev
      libflac-dev
      libogg-dev
      libvorbis-dev
      libvorbisenc2
      libvorbisfile3
      libopenal-dev

jobs:
  include:
    - os: osx
    # For OSX, use 10.15.4 with Xcode 11.6 to have clang++-10 and premake5 for correct architecture
      osx_image: xcode11.6
      env: COMPILER=clang++  # osx simply names "clang" the latest clang installed with Xcode toolchain
      compiler: clang++
    - os: linux
      env: COMPILER=g++-10
      addons:
        apt:
          packages:
            - *linux_packages
            - g++-10
            - lcov
          sources:
            - ubuntu-toolchain-r-test
    - os: linux
      env: COMPILER=clang++-10
      addons:
        apt:
          packages:
            - *linux_packages
            - clang-10
            - lcov
          sources:
            - llvm-toolchain-bionic-10
      compiler: clang++

before_install:
  # install lcov for OSX
  - |
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      brew install lcov
    fi

install:
  # Set the ${CXX} variable properly (don't do it in env, it is too early and would be overriden
  # by travis compiler settings just afterward)
  # and do it after the initial package install to have g++-10 available if used
  - export CXX=${COMPILER}
  - ${CXX} --version

  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}"
  - pushd "${DEPS_DIR}"

  # Download premake binary for current platform if not already done via cache (also check version just in case)
  - |
    if [[ ! -d "premake-${PREMAKE_VERSION}" || ! -x "premake-${PREMAKE_VERSION}/premake5" || "$(premake5 --version)" != *"${PREMAKE_VERSION}" ]]; then
      rm -rf "premake-${PREMAKE_VERSION}"
      mkdir -p "premake-${PREMAKE_VERSION}"
      pushd "premake-${PREMAKE_VERSION}"

      if [ "$TRAVIS_OS_NAME" == "osx" ]; then
        PREMAKE_BINARY_OS_NAME="macosx"
      else
        PREMAKE_BINARY_OS_NAME="linux"
      fi
      wget "https://github.com/premake/premake-core/releases/download/v${PREMAKE_VERSION}/premake-${PREMAKE_VERSION}-${PREMAKE_BINARY_OS_NAME}.tar.gz"
      tar -xvzf "premake-${PREMAKE_VERSION}-${PREMAKE_BINARY_OS_NAME}.tar.gz"

      popd
    fi
  # Install premake in ~/bin
  - mkdir -p "$HOME/bin"
  - cp "premake-${PREMAKE_VERSION}/premake5" "$HOME/bin/premake5"

  # Commenting out block below in case it's actually causing "/usr/bin/ld: cannot find -lc++" instead of fixing it

  ############################################################################
  # [linux]: Install the right version of libc++ (required for e.g. C++20, when using clang only)
  ############################################################################
  # always use (cd ... && ...) to avoid changing directory in the main prompt
  # - |
  #   LLVM_INSTALL=${DEPS_DIR}/llvm/install
  #   if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CXX%%+*}" == "clang" && ( ! -d "${LLVM_INSTALL}" || -z "$(ls -A ${LLVM_INSTALL})" ) ]]; then
  #     LLVM_VERSION="10.0.0"
  #     LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
  #     LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
  #     LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
  #     mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
  #     travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm
  #     travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx
  #     travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi
  #     (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})
  #     (cd llvm/build/projects/libcxx && make install -j2)
  #     (cd llvm/build/projects/libcxxabi && make install -j2)
  #     export CXXFLAGS="-isystem ${LLVM_INSTALL}/include/c++/v1"
  #     export LDFLAGS="-L ${LLVM_INSTALL}/lib -l c++ -l c++abi"
  #     export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib"
  #   fi

  # leave DEPS_DIR
  - popd

before_script:
  # Build dependencies
  - engine/third-party/build_sfml.py
  # Premake
  - premake5 gmake

script:
  # Make (build dir must have been created by premake5)
  - pushd build
  # Manual debug to understand how each platform generates Makefile for premake
  - echo "Game.make content:"
  - cat Game.make
  - config=release make -j${JOBS}
  - popd
